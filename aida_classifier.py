# -*- coding: utf-8 -*-
"""AIDA Classification Logic

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QRIVzq8mKwVEkiX_mZK97ot8ewvHKtx8
"""

import pandas as pd
import json
import os

# --- 1. Load Classification Rules (The AIDA Dictionary) ---
# In a real application, you would load these from a file or database.
# We hardcode a sample here for simplicity, but we will create a JSON file
# in the next step which this code is designed to load.
def load_aida_rules():
    """Loads the AIDA keyword mapping rules."""
    try:
        # Load the rules from the aida_data.json file
        with open('aida_data.json', 'r') as f:
            rules = json.load(f)
        return rules
    except FileNotFoundError:
        print("Error: aida_data.json not found. Using default internal rules.")
        # Fallback dictionary if the file is missing
        return {
            "Attention": ["what is", "how to", "why is", "solve", "guide", "tutorial"],
            "Interest": ["best", "top", "ideas", "examples", "compare", "alternative", "pros and cons"],
            "Desire": ["review", "cost", "price", "cheap", "discount", "coupon"],
            "Action": ["buy", "order", "purchase", "sign up", "download", "hire", "contact"]
        }

# --- 2. Classification Function ---
def classify_keyword(keyword, rules):
    """
    Classifies a single keyword into an AIDA stage.
    It returns the first AIDA stage that matches the keyword.
    """
    # Convert the keyword to lowercase for case-insensitive matching
    keyword_lower = str(keyword).lower().strip()

    # Check for matches in order (A > I > D > A)
    for stage, trigger_words in rules.items():
        for word in trigger_words:
            if word in keyword_lower:
                return stage

    # If no trigger word is found
    return "Unclassified"

# --- 3. Process DataFrames (for Excel/CSV Upload) ---
def process_dataframe(df, rules, keyword_column_name='Keyword'):
    """Processes a Pandas DataFrame and adds the AIDA classification column."""
    if keyword_column_name not in df.columns:
        return pd.DataFrame({
            'Error': [f"The uploaded file must contain a column named '{keyword_column_name}'."]
        })

    # Apply the classification function to every keyword in the specified column
    df['AIDA Stage'] = df[keyword_column_name].apply(
        lambda x: classify_keyword(x, rules)
    )

    # Reorder columns to show the classification first
    cols = ['AIDA Stage', keyword_column_name] + [col for col in df.columns if col not in ['AIDA Stage', keyword_column_name]]
    return df[cols]

# We will now create the aida_data.json file to accompany this script.